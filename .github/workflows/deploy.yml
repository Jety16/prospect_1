name: üöÄ Deploy Fullstack App to GCP VM with Docker Compose + Cloud SQL Proxy

on:
  push:
    branches:
      - produccion

env:
  VM_USER: github-deploy
  VM_HOST: ${{ secrets.VM_HOST }}
  PROJECT_DIR: /home/github-deploy/prospect-app
  CLOUD_SQL_INSTANCE: cloud-engineer-test-juanc:us-central1:files

jobs:
  deploy:
    name: üîÑ Deploy to VM with Cloud SQL Proxy
    runs-on: ubuntu-latest
    environment: deploy

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üîê Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.VM_HOST }} >> ~/.ssh/known_hosts

      - name: üõ†Ô∏è Ensure rsync is installed on VM
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.VM_USER }}@${{ env.VM_HOST }} << 'EOF'
            if ! command -v rsync &> /dev/null; then
              sudo apt update && sudo apt install -y rsync
            fi
EOF

      - name: üöö Sync Project to VM
        run: |
          rsync -az --delete -e "ssh -i ~/.ssh/id_rsa" ./ ${{ env.VM_USER }}@${{ env.VM_HOST }}:${{ env.PROJECT_DIR }}

      - name: üß† Start Cloud SQL Proxy on VM
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.VM_USER }}@${{ env.VM_HOST }} << EOF
            if ! pgrep -f "cloud_sql_proxy.*${{ env.CLOUD_SQL_INSTANCE }}" > /dev/null; then
              echo "üîå Starting Cloud SQL Proxy..."
              nohup cloud_sql_proxy -dir=/cloudsql -instances=${{ env.CLOUD_SQL_INSTANCE }}=tcp:5432 > cloudsql.log 2>&1 &
              sleep 2
              echo "‚úÖ Proxy started."
            else
              echo "‚ö†Ô∏è Cloud SQL Proxy already running."
            fi
EOF

      - name: üê≥ Deploy Docker Compose Stack
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.VM_USER }}@${{ env.VM_HOST }} << EOF
            cd ${{ env.PROJECT_DIR }}

            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            fi

            # Install Docker Compose if missing
            if ! command -v docker-compose &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker-compose
            fi

            # Deploy stack
            docker-compose down
            docker-compose up -d --build